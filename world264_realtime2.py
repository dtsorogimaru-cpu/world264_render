# world264_realtime3.py
# -*- coding: utf-8 -*-
"""
‡∏î‡∏∂‡∏á‡∏ú‡∏• WORLD264 ‡πÅ‡∏ö‡∏ö realtime ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÑ‡∏õ Telegram/LINE
- ‡∏Ñ‡∏±‡πà‡∏ô‡∏ú‡∏•‡πÅ‡∏ö‡∏ö "‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á" ‡∏ó‡∏µ‡∏•‡∏∞ 4 ‡∏£‡∏≠‡∏ö: 1‚Äì4, 5‚Äì8, 9‚Äì12, ...
- ‡∏Å‡∏±‡∏ô‡∏£‡∏≠‡∏ö‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ last_sent_round
- ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å format_world264_range.py ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
"""

import os
import time
import argparse
from datetime import date, timedelta
from typing import List, Tuple

from dotenv import load_dotenv

# ====== ‡∏ô‡∏≥‡∏ï‡∏±‡∏ß‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏≤‡πÉ‡∏ä‡πâ (‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á) ======
# ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå format_world264_range.py ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡πâ‡∏≤‡∏á ‡πÜ ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ
import format_world264_range as fw  # fetch_json(d), pick_world264_key(data), extract_rows(data, key)

load_dotenv()

# ------------- ENV / CONFIG -------------
# Telegram (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á)
TG_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ chat id ‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ,
TG_CHAT_IDS = [s.strip() for s in os.getenv("TELEGRAM_CHAT_IDS", "").split(",") if s.strip()]

# LINE (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á)
LINE_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN", "").strip()
LINE_TO_IDS = [s.strip() for s in os.getenv("LINE_GROUP_IDS", "").split(",") if s.strip()]

# ------------- Types -------------
Row = Tuple[int, str, str, str]  # (round, hh:mm, top3, bot2)


# ------------- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° -------------
def send_telegram(text: str) -> None:
    if not (TG_TOKEN and TG_CHAT_IDS):
        return
    import httpx
    url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    payload = lambda chat_id: {
        "chat_id": chat_id,
        "text": text[:4000],  # TG limit ~4096
        "disable_web_page_preview": True,
        "parse_mode": "HTML",  # ‡πÉ‡∏ä‡πâ plain ‡∏Å‡πá‡πÑ‡∏î‡πâ
    }
    with httpx.Client(timeout=20) as c:  # type: ignore
        for chat in TG_CHAT_IDS:
            try:
                r = c.post(url, data=payload(chat))
                if r.status_code != 200:
                    print("[TG]", chat, r.status_code, r.text[:160])
            except Exception as e:
                print("[TG-ERR]", chat, e)


def send_line(text: str) -> None:
    if not (LINE_TOKEN and LINE_TO_IDS):
        return
    import httpx
    headers = {"Authorization": f"Bearer {LINE_TOKEN}", "Content-Type": "application/json"}
    body = lambda to: {"to": to, "messages": [{"type": "text", "text": text[:4900]}]}
    with httpx.Client(timeout=20) as c:  # type: ignore
        for gid in LINE_TO_IDS:
            try:
                r = c.post("https://api.line.me/v2/bot/message/push", headers=headers, json=body(gid))
                if r.status_code != 200:
                    print("[LINE]", gid, r.status_code, r.text[:160])
            except Exception as e:
                print("[LINE-ERR]", gid, e)


def send_all(text: str) -> None:
    # ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á ENV ‡πÑ‡∏ß‡πâ
    send_telegram(text)
    send_line(text)


# ------------- WORLD264 helpers -------------
def has_result(t: Row) -> bool:
    # ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á top3 ‡πÅ‡∏•‡∏∞ bottom2
    return bool((t[2] or "").strip()) and bool((t[3] or "").strip())


def fetch_rows_for(d: date) -> List[Row]:
    """‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô format_world264_range ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á/‡πÅ‡∏õ‡∏•‡∏á‡∏ú‡∏• ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ú‡∏•"""
    data = fw.fetch_json(d)                 # ‚Üê ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
    key = fw.pick_world264_key(data)        # ‚Üê ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
    if not key:
        return []
    rows = [t for t in fw.extract_rows(data, key) if has_result(t)]
    rows.sort(key=lambda t: t[0])           # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏≠‡∏ö
    return rows


# ------------- Build message (‡πÅ‡∏ö‡∏ö‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á 4 ‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡∏ö‡∏•‡πá‡∏≠‡∏Å) -------------
def build_message(rows: List[Row], add_footer: bool = True) -> str:
    """
    ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö '‡πÅ‡∏ä‡πà‡πÅ‡∏Ç‡πá‡∏á' ‡∏ó‡∏µ‡∏•‡∏∞ 4 ‡∏£‡∏≠‡∏ö‡πÄ‡∏™‡∏°‡∏≠:
    1‚Äì4, 5‚Äì8, 9‚Äì12, ... ‡πÇ‡∏î‡∏¢‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ'
    """
    rows = sorted(rows, key=lambda t: t[0])

    lines = ["üü¢World Lotto 5‡∏ô‡∏≤‡∏ó‡∏µüü¢"]
    block: List[str] = []

    for i, (rn, hhmm, top3, bot2) in enumerate(rows, start=1):
        block.append(f"{rn:>3}: {hhmm} ‚û°Ô∏è {top3} - {bot2}")
        # ‡∏Ñ‡∏£‡∏ö 4 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‚Üí ‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        if i % 4 == 0:
            lines.append("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
            lines.extend(block)
            lines.append("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
            block = []

    # ‡∏Å‡∏£‡∏ì‡∏µ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö 4 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    if block:
        lines.append("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
        lines.extend(block)
        lines.append("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")

    # ‡∏ü‡∏∏‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (optional)
    if add_footer and rows:
        rn, hhmm, top3, bot2 = rows[-1]
        footer = (
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
            "üü¢World Lotto 5‡∏ô‡∏≤‡∏ó‡∏µüü¢\n"
            f"       264world ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {rn}      \n"
            f"            {top3} - {bot2} \n"
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ"
        )
        lines.append(footer)

    return "\n".join(lines)


# ------------- Main loop -------------
def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--poll", type=int, default=int(os.getenv("POLL_SEC", "20")))
    ap.add_argument("--limit", type=int, default=int(os.getenv("WINDOW_SIZE", "40")))
    ap.add_argument("--force", action="store_true", help="‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    args = ap.parse_args()

    poll = max(5, args.poll)
    limit = max(1, args.limit)

    cur_day = date.today()
    last_sent_round = 0
    window: List[Row] = []

    print(f"[START] day={cur_day} poll={poll}s limit={limit}")

    while True:
        try:
            # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ ‡∏Ç‡∏≠‡∏•‡∏≠‡∏á‡∏ñ‡∏≠‡∏¢‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
            try_days = [cur_day, cur_day - timedelta(days=1)]
            rows_all: List[Row] = []
            for d in try_days:
                try:
                    rows_all = fetch_rows_for(d)
                    if rows_all:
                        break
                except Exception as e:
                    print(f"[DBG] fetch {d} failed:", e)

            if rows_all:
                # init window
                if not window:
                    window = rows_all[-limit:]
                    if args.force:
                        send_all(build_message(window))
                        last_sent_round = window[-1][0]
                        print(f"[SEND] force up to round={last_sent_round}")

                # ‡∏´‡∏≤ "‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà" ‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ last_sent_round
                new_rows = [t for t in rows_all if t[0] > last_sent_round]
                if new_rows:
                    # ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥ + ‡πÄ‡∏£‡∏µ‡∏¢‡∏á
                    seen = {t[0] for t in window}
                    new_rows = [t for t in new_rows if t[0] not in seen]
                    new_rows.sort(key=lambda t: t[0])

                    if new_rows:
                        window.extend(new_rows)
                        # ‡∏Ñ‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ N ‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                        window = sorted(window, key=lambda t: t[0])[-limit:]
                        send_all(build_message(window))
                        last_sent_round = window[-1][0]
                        print(f"[SEND] up to round={last_sent_round}")

        except Exception as e:
            print("[ERR]", e)

        # ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà ‚Üí reset ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏à‡∏≥
        if date.today() != cur_day:
            cur_day = date.today()
            last_sent_round = 0
            window = []
            print("[DBG] new day ‚Üí reset")

        time.sleep(poll)


if __name__ == "__main__":
    main()
