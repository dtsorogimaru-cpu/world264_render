# world264_realtime3.py
# -*- coding: utf-8 -*-
"""
WORLD264 realtime ‚Üí ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ Telegram / LINE
- ‡∏à‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö "‡∏•‡πá‡∏≠‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å 4 ‡∏£‡∏≠‡∏ö": 1‚Äì4, 5‚Äì8, 9‚Äì12, ...
- ‡∏Å‡∏±‡∏ô‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ last_sent_round
- Telegram: ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏™‡∏î‡∏á 50 ‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ä‡∏ô‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á Telegram)
- LINE: ‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á LIMIT_LINE_ROUNDS ‡πÉ‡∏ô ENV ‡πÑ‡∏î‡πâ)

ENV:
  TELEGRAM_BOT_TOKEN
  TELEGRAM_CHAT_IDS              (‡∏Ñ‡∏±‡πà‡∏ô‡∏´‡∏•‡∏≤‡∏¢ id ‡∏î‡πâ‡∏ß‡∏¢ ,)
  LINE_CHANNEL_ACCESS_TOKEN
  LINE_GROUP_IDS                 (‡∏Ñ‡∏±‡πà‡∏ô‡∏´‡∏•‡∏≤‡∏¢ id ‡∏î‡πâ‡∏ß‡∏¢ ,)
  POLL_SEC (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô, default 20)
  LIMIT_TG_ROUNDS (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô, default 50)
  LIMIT_LINE_ROUNDS (‡∏≠‡∏≠‡∏õ‡∏ä‡∏±‡∏ô, ‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á = ‡∏™‡πà‡∏á‡πÄ‡∏ï‡πá‡∏°)
"""

import os
import time
import argparse
from datetime import date, timedelta
from typing import List, Tuple

from dotenv import load_dotenv
import format_world264_range as fw   # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà

load_dotenv()

# -------- Settings / ENV ----------
TG_TOKEN    = os.getenv("TELEGRAM_BOT_TOKEN", "").strip()
TG_CHATS    = [s.strip() for s in os.getenv("TELEGRAM_CHAT_IDS", "").split(",") if s.strip()]

LINE_TOKEN  = os.getenv("LINE_CHANNEL_ACCESS_TOKEN", "").strip()
LINE_TO     = [s.strip() for s in os.getenv("LINE_GROUP_IDS", "").split(",") if s.strip()]

LIMIT_TG    = int(os.getenv("LIMIT_TG_ROUNDS", "50"))     # << ‡∏à‡∏≥‡∏Å‡∏±‡∏î Telegram 50 ‡∏£‡∏≠‡∏ö
LIMIT_LINE  = os.getenv("LIMIT_LINE_ROUNDS", "").strip()
LIMIT_LINE  = int(LIMIT_LINE) if LIMIT_LINE.isdigit() else None

Row = Tuple[int, str, str, str]  # (round, hh:mm, top3, bot2)


# -------- Senders ----------
def send_telegram(text: str):
    if not (TG_TOKEN and TG_CHATS): return
    import httpx
    url = f"https://api.telegram.org/bot{TG_TOKEN}/sendMessage"
    with httpx.Client(timeout=20) as c:  # type: ignore
        for chat in TG_CHATS:
            try:
                r = c.post(url, data={
                    "chat_id": chat,
                    "text": text[:4000],  # TG ~4096
                    "disable_web_page_preview": True
                })
                if r.status_code != 200:
                    print("[TG]", chat, r.status_code, r.text[:160])
            except Exception as e:
                print("[TG-ERR]", chat, e)

def send_line(text: str):
    if not (LINE_TOKEN and LINE_TO): return
    import httpx
    headers = {"Authorization": f"Bearer {LINE_TOKEN}", "Content-Type": "application/json"}
    with httpx.Client(timeout=20) as c:  # type: ignore
        for to in LINE_TO:
            try:
                r = c.post("https://api.line.me/v2/bot/message/push",
                           headers=headers,
                           json={"to": to, "messages": [{"type": "text", "text": text[:4900]}]})
                if r.status_code != 200:
                    print("[LINE]", to, r.status_code, r.text[:160])
            except Exception as e:
                print("[LINE-ERR]", to, e)


# -------- Fetch rows ----------
def has_result(t: Row) -> bool:
    return bool((t[2] or "").strip()) and bool((t[3] or "").strip())

def fetch_rows_for(d: date) -> List[Row]:
    data = fw.fetch_json(d)
    key  = fw.pick_world264_key(data)
    if not key: return []
    rows = [t for t in fw.extract_rows(data, key) if has_result(t)]
    rows.sort(key=lambda t: t[0])
    return rows


# -------- Helper: slice ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î N ‡∏£‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å (4 ‡∏£‡∏≠‡∏ö) --------
def slice_last_n_aligned(rows: List[Row], n: int) -> List[Row]:
    """
    ‡∏ï‡∏±‡∏î‡πÄ‡∏≠‡∏≤ 'n ‡∏£‡∏≠‡∏ö‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î' ‡πÅ‡∏ï‡πà‡∏à‡∏∞ **‡∏Ç‡∏¢‡∏±‡∏ö‡∏à‡∏∏‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°** ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡πâ‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å (1‚Äì4, 5‚Äì8, ‚Ä¶)
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏±‡πà‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å 4 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
    """
    if not rows or n <= 0:
        return []

    rows = sorted(rows, key=lambda t: t[0])
    max_round = rows[-1][0]
    start_round = max_round - n + 1
    # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡∏ó‡∏µ‡πà '‡∏´‡∏±‡∏ß‡∏ö‡∏•‡πá‡∏≠‡∏Å'
    start_round = ((start_round - 1) // 4) * 4 + 1
    # ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ
    min_round = rows[0][0]
    if start_round < min_round:
        start_round = min_round
    return [t for t in rows if t[0] >= start_round]


# -------- Build message (locked 4-round blocks) ----------
def build_message_locked(rows: List[Row], add_footer: bool = True) -> str:
    """
    ‡∏Ñ‡∏±‡πà‡∏ô‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏ó‡∏∏‡∏Å 4 ‡∏£‡∏≠‡∏ö ‚Äî ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô:
    1‚Äì4, 5‚Äì8, 9‚Äì12, ...
    """
    if not rows:
        return "üü¢World Lotto 5‡∏ô‡∏≤‡∏ó‡∏µüü¢\n(‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•)"

    rows = sorted(rows, key=lambda t: t[0])

    lines: List[str] = ["üü¢World Lotto 5‡∏ô‡∏≤‡∏ó‡∏µüü¢"]
    current_block = None  # index ‡∏Ç‡∏≠‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å (0 ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏ö 1‚Äì4)

    for rn, hhmm, top3, bot2 in rows:
        block_id = (rn - 1) // 4
        if block_id != current_block:
            lines.append("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")
            current_block = block_id
        lines.append(f"{rn:>3}: {hhmm} ‚û°Ô∏è {top3} - {bot2}")

    lines.append("‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ")

    if add_footer:
        rn, hhmm, top3, bot2 = rows[-1]
        lines += [
            "üü¢World Lotto 5‡∏ô‡∏≤‡∏ó‡∏µüü¢",
            f"       264world ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {rn}",
            f"            {top3} - {bot2}",
            "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ",
        ]
    return "\n".join(lines)


# -------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á --------
def build_for_telegram(rows_all: List[Row]) -> str:
    limited = slice_last_n_aligned(rows_all, LIMIT_TG)
    return build_message_locked(limited, add_footer=True)

def build_for_line(rows_all: List[Row]) -> str:
    if LIMIT_LINE:
        limited = slice_last_n_aligned(rows_all, LIMIT_LINE)
        return build_message_locked(limited, add_footer=True)
    # ‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î ‚Üí ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô
    return build_message_locked(rows_all, add_footer=True)


# -------- Main loop ----------
def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--poll", type=int, default=int(os.getenv("POLL_SEC", "20")))
    ap.add_argument("--force", action="store_true", help="‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ")
    args = ap.parse_args()

    poll = max(5, args.poll)

    today = date.today()
    last_sent_round = 0  # ‡∏Å‡∏±‡∏ô‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥

    print(f"[START] day={today} poll={poll}s  (locked blocks, TG limit {LIMIT_TG} rounds)")

    while True:
        try:
            # ‡∏ö‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏≤‡∏à‡∏°‡∏≤‡∏ä‡πâ‡∏≤ ‚Üí ‡∏•‡∏≠‡∏á‡∏ñ‡∏≠‡∏¢‡πÑ‡∏õ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô
            rows_all: List[Row] = []
            for d in (today, today - timedelta(days=1)):
                try:
                    rows_all = fetch_rows_for(d)
                    if rows_all:
                        break
                except Exception as e:
                    print(f"[DBG] fetch {d} failed:", e)

            if rows_all:
                if args.force and last_sent_round == 0:
                    # ‡∏™‡πà‡∏á‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á
                    tg_text = build_for_telegram(rows_all)
                    ln_text = build_for_line(rows_all)
                    if TG_TOKEN and TG_CHATS: send_telegram(tg_text)
                    if LINE_TOKEN and LINE_TO: send_line(ln_text)
                    last_sent_round = rows_all[-1][0]
                    print(f"[SEND] init up to round={last_sent_round}")

                # ‡∏°‡∏µ‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if rows_all[-1][0] > last_sent_round:
                    tg_text = build_for_telegram(rows_all)
                    ln_text = build_for_line(rows_all)
                    if TG_TOKEN and TG_CHATS: send_telegram(tg_text)
                    if LINE_TOKEN and LINE_TO: send_line(ln_text)
                    last_sent_round = rows_all[-1][0]
                    print(f"[SEND] up to round={last_sent_round}")

        except Exception as e:
            print("[ERR]", e)

        # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‚Üí ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï state
        if date.today() != today:
            today = date.today()
            last_sent_round = 0
            print("[DBG] new day ‚Üí reset")

        time.sleep(poll)


if __name__ == "__main__":
    main()
